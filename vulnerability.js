const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

const webNames = fs.readFileSync('./scan_network_result.txt', 'utf-8').split('\n').filter(Boolean);
const cleanedWebNames = webNames.map(name => name.trim());
const folderName = 'recon_output';

if (!fs.existsSync(folderName)) {
    fs.mkdirSync(folderName);
}

const wordpressScanVulnerability = function(webName) {
    const cleanWebName = webName.replace(/^https?:\/\//, '');
    const portMatch = cleanWebName.match(/:(\d+)/);
    const host = portMatch ? cleanWebName.replace(/:\d+/, '') : cleanWebName;
    const port = portMatch ? portMatch[1] : null;

    const fileName = port ? `${host}.p${port}.txt` : `${host}.txt`;
    const filePath = path.join(folderName, fileName);

    const command = `sudo wpscan --url "${webName}" --enumerate ap`;
    console.log(`Executing command: ${command}`);
    console.log(`Clean web name: ${fileName}`);

    exec(command, { shell: true }, (error, stdout, stderr) => {
        if (error) {
            console.error(`Error executing command: ${error.message}`);
            return;
        }
        if (stderr) {
            console.error(`stderr: ${stderr}`);
            return;
        }

        if (stdout.includes("Scan Aborted: The url supplied") && stdout.includes("seems to be down")) {
            console.log(`Skipping file creation for ${webName} as the URL seems to be down.`);
        } else if (stdout.includes("Error executing command")) {
            console.log(`Skipping file creation for ${webName} due to command error.`);
        } else {
            fs.writeFileSync(filePath, `Website: ${webName}\n${stdout}`, 'utf-8');
            console.log(`File saved: ${filePath}`);
        }
    });
    
}

cleanedWebNames.forEach(webName => {
    wordpressScanVulnerability(webName);
});
